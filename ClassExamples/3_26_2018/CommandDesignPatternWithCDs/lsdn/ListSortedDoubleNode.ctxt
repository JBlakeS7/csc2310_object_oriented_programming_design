#BlueJ class context
comment0.params=command
comment0.target=void\ execute(Command)
comment1.params=
comment1.target=ListSortedDoubleNode()
comment10.params=sk
comment10.target=void\ remove(java.lang.Comparable)
comment11.params=curr
comment11.target=KeyedItem\ remove(DoubleNode)
comment11.text=\r\n\ \ Removes\ the\ specified\ node\ from\ the\ list.\ <br>\r\n\ \ Preconditions\:\ curr\ is\ not\ null\ and\ is\ a\ node\ in\ the\ list\ <br>\r\n\ \ Postconditions\:\ curr\ is\ removed\ from\ the\ list,\ but\ otherwise\ unaltered\ <br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ remaining\ nodes\ in\ the\ list\ maintain\ ascending\ search\ key\ order\ <br>\r\n\ \ Throws\:\ none\ (there\ will\ be\ unspecified\ behavior\ if\ the\ preconditions\ are\ not\ met)\ <br>\r\n
comment12.params=
comment12.target=void\ removeAll()
comment13.params=
comment13.target=DoubleNode\ findHead()
comment14.params=
comment14.target=DoubleNode\ findTail()
comment15.params=
comment15.target=KeyedItem\ remove()
comment16.params=
comment16.target=java.util.Iterator\ iterator()
comment16.text=\r\n\ \ Returns\ an\ Iterator\ for\ the\ list.\ <br>\r\n\ \ Preconditions\:\ none\ <br>\r\n\ \ Postconditions\:\ an\ iterator\ for\ the\ list\ is\ returned\ <br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ iterator\ begins\ at\ the\ head\ and\ proceeds\ to\ the\ tail\ <br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ the\ iterator\ is\ forward,\ read\ only\ and\ assumes\ (but\ won't\ detect)\ that\ the\ list\ is\ not\ altered\ during\ iteration\ <br>\r\n\ \ Throws\:\ none\ <br>\r\n
comment17.params=sk
comment17.target=void\ checkInvariants(java.lang.Comparable)
comment18.params=
comment18.target=boolean\ checkSorted()
comment19.params=
comment19.target=boolean\ checkSizeForward()
comment2.params=
comment2.target=boolean\ isEmpty()
comment20.params=
comment20.target=boolean\ checkSizeBackward()
comment3.params=
comment3.target=int\ size()
comment4.params=sk
comment4.target=KeyedItem\ get(java.lang.Comparable)
comment5.params=sk
comment5.target=DoubleNode\ findLocation(java.lang.Comparable)
comment6.params=sk
comment6.target=DoubleNode\ locateNodeRemove(java.lang.Comparable)
comment7.params=sk
comment7.target=DoubleNode\ locateNodeAdd(java.lang.Comparable)
comment8.params=item
comment8.target=void\ add(KeyedItem)
comment9.params=item
comment9.target=DoubleNode\ addDN(KeyedItem)
comment9.text=\r\n\ \ After\ creating\ a\ new\ node\ and\ inserting\ item\ into\ it,\ returns\ a\ reference\ to\ that\ node.\ <br>\r\n\ \ Preconditions\:\ see\ the\ public\ add\ method\ <br>\r\n\ \ Postconditions\:\ if\ the\ insert\ is\ successful,\ a\ reference\ to\ the\ node\ containing\ item\ is\ returned\ <br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ this\ default\ visibility\ method\ trusts\ that\ the\ node\ returned\ will\ not\ be\ tampered\ with\ <br>\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ item\ is\ not\ otherwise\ affected\ <br>\r\n\ \ Throws\:\ see\ the\ public\ add\ method\ <br>\r\n
numComments=21
